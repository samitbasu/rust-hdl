"use strict";(self.webpackChunkrust_hdl_org=self.webpackChunkrust_hdl_org||[]).push([[861],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),g=u(n),p=i,m=g["".concat(s,".").concat(p)]||g[p]||d[p]||o;return n?r.createElement(m,l(l({ref:t},c),{},{components:n})):r.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=p;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[g]="string"==typeof e?e:i,l[1]=a;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1736:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const o={},l="Generating Verilog",a={unversionedId:"guide/rusthdl/verilog",id:"guide/rusthdl/verilog",title:"Generating Verilog",description:"At some point, you will want to generate Verilog so you can send your design to other",source:"@site/docs/guide/rusthdl/verilog.md",sourceDirName:"guide/rusthdl",slug:"/guide/rusthdl/verilog",permalink:"/guide/rusthdl/verilog",draft:!1,editUrl:"https://github.com/samitbasu/rust-hdl/tree/main/packages/create-docusaurus/templates/shared/docs/guide/rusthdl/verilog.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Traits",permalink:"/guide/rusthdl/traits"},next:{title:"Wrapping IP Cores",permalink:"/guide/rusthdl/wrapping"}},s={},u=[],c={toc:u},g="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(g,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"generating-verilog"},"Generating Verilog"),(0,i.kt)("p",null,"At some point, you will want to generate Verilog so you can send your design to other\ntools.  This is pretty simple.  You call ","[generate_verilog]"," and pass it a reference\nto the circuit in question.  The ","[generate_verilog]"," function will check your circuit,\nand then return a string that contains the Verilog equivalent.  It's pretty simple."),(0,i.kt)("p",null,"Here is an example.  We will reuse the ",(0,i.kt)("inlineCode",{parentName:"p"},"MyAdder")," circuit from the testbench section,\nbut this time, generate the Verilog for the circuit instead of simulating it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use rust_hdl::prelude::*;   // <- shorthand to bring in all definitions\n\n//        v--- Required by RustHDL\n#[derive(LogicBlock, Default)]\nstruct MyAdder {\n    pub sig_a: Signal<In, Bits<8>>,\n    pub sig_b: Signal<In, Bits<8>>,\n    pub sig_sum: Signal<Out, Bits<8>>,\n    pub clock: Signal<In, Clock>,\n    my_reg: DFF<Bits<8>>,\n}\n\nimpl Logic for MyAdder {\n  #[hdl_gen]  // <--- don\'t forget this\n  fn update(&mut self) {\n       // Setup the DFF.. this macro is handy to prevent latches\n       dff_setup!(self, clock, my_reg);\n       self.my_reg.d.next = self.sig_a.val() + self.sig_b.val();\n       self.sig_sum.next = self.my_reg.q.val();\n   }\n}\n\nlet mut uut = MyAdder::default();\nuut.connect_all();\nprintln!("{}", generate_verilog(&uut));\n')),(0,i.kt)("p",null,"You should get the following generated code in your console:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"module top(sig_a,sig_b,sig_sum,clock);\n\n    // Module arguments\n    input wire  [7:0] sig_a;\n    input wire  [7:0] sig_b;\n    output reg  [7:0] sig_sum;\n    input wire  clock;\n\n    // Stub signals\n    reg  [7:0] my_reg$d;\n    wire  [7:0] my_reg$q;\n    reg  my_reg$clock;\n\n    // Sub module instances\n    top$my_reg my_reg(\n        .d(my_reg$d),\n        .q(my_reg$q),\n        .clock(my_reg$clock)\n    );\n\n    // Update code\n    always @(*) begin\n        my_reg$clock = clock;\n        my_reg$d = my_reg$q;\n        my_reg$d = sig_a + sig_b;\n        sig_sum = my_reg$q;\n    end\n\nendmodule // top\n\n\nmodule top$my_reg(d,q,clock);\n\n    // Module arguments\n    input wire  [7:0] d;\n    output reg  [7:0] q;\n    input wire  clock;\n\n    // Update code (custom)\n    initial begin\n       q = 8'h0;\n    end\n\n    always @(posedge clock) begin\n       q <= d;\n    end\n\nendmodule // top$my_reg\n")),(0,i.kt)("p",null,"A few things about the Verilog generated."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"It is hierarchical (scoped) by design.  The scopes mimic the scopes inside the RustHDL circuit.\nThat makes it easy to map the Verilog back to the RustHDL code if needed when debugging."),(0,i.kt)("li",{parentName:"ul"},"The code is readable and formatted."),(0,i.kt)("li",{parentName:"ul"},"The names correspond to the names in RustHDL, which makes it easy to see the details of the logic."),(0,i.kt)("li",{parentName:"ul"},"RustHDL (at least for this trivial example) is a pretty thin wrapper around Verilog.  That's\ngood for compatibility with tooling.")),(0,i.kt)("p",null,"While most FPGAs will require you to use a proprietary and closed source toolchain to synthesize\nyour design, you can use the open source ","[Yosys]"," compiler (if you have it installed) to\ncheck your designs.  For that, you can use the ","[yosys_validate]"," function, which runs the Verilog\nthrough some checks and reports on potential errors.  At the moment, ","[Yosys]"," is far more\nthorough in it's checking than RustHDL, so I highly recommend you install it and use the\n","[yosys_validate]"," function on your generated Verilog."))}d.isMDXComponent=!0}}]);