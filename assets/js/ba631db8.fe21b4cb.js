"use strict";(self.webpackChunkrust_hdl_org=self.webpackChunkrust_hdl_org||[]).push([[417],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=l(r),d=a,f=m["".concat(p,".").concat(d)]||m[d]||c[d]||i;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8761:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const i={},o="Operations on bits",s={unversionedId:"guide/rusthdl/operators",id:"guide/rusthdl/operators",title:"Operations on bits",description:"The Bits type supports a subset of operations that can be synthesized in",source:"@site/docs/guide/rusthdl/operators.md",sourceDirName:"guide/rusthdl",slug:"/guide/rusthdl/operators",permalink:"/guide/rusthdl/operators",draft:!1,editUrl:"https://github.com/samitbasu/rust-hdl/tree/main/packages/create-docusaurus/templates/shared/docs/guide/rusthdl/operators.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Loops and Arrays",permalink:"/guide/rusthdl/loops"},next:{title:"Signal Type",permalink:"/guide/rusthdl/signals"}},p={},l=[],u={toc:l},m="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"operations-on-bits"},"Operations on bits"),(0,a.kt)("p",null," The ",(0,a.kt)("a",{parentName:"p",href:"core::bits::Bits"},"Bits")," type supports a subset of operations that can be synthesized in\nhardware.  You can perform"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Addition between ",(0,a.kt)("inlineCode",{parentName:"p"},"Bits")," of the same size using the ",(0,a.kt)("inlineCode",{parentName:"p"},"+")," operator")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Subtraction between ",(0,a.kt)("inlineCode",{parentName:"p"},"Bits")," of the same size using the ",(0,a.kt)("inlineCode",{parentName:"p"},"-")," operator")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Bitwise logical ",(0,a.kt)("inlineCode",{parentName:"p"},"AND")," between ",(0,a.kt)("inlineCode",{parentName:"p"},"Bits")," of the same size using the ",(0,a.kt)("inlineCode",{parentName:"p"},"&")," operator")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Bitwise logical ",(0,a.kt)("inlineCode",{parentName:"p"},"OR")," between ",(0,a.kt)("inlineCode",{parentName:"p"},"Bits")," of the same size using the ",(0,a.kt)("inlineCode",{parentName:"p"},"|")," operator")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Bitwise logical ",(0,a.kt)("inlineCode",{parentName:"p"},"XOR")," (Exclusive Or) between ",(0,a.kt)("inlineCode",{parentName:"p"},"Bits")," of the same size using the ",(0,a.kt)("inlineCode",{parentName:"p"},"^")," operator")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Bitwise comparisons for equality between ",(0,a.kt)("inlineCode",{parentName:"p"},"Bits")," of the same size using ",(0,a.kt)("inlineCode",{parentName:"p"},"==")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"!=")," operators")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Unsigned comparisons (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},">,>=,<,<="),") between ",(0,a.kt)("inlineCode",{parentName:"p"},"Bits")," of the same size - these are\nalways treated as unsigned values for comparison purposes.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Shift left using the ",(0,a.kt)("inlineCode",{parentName:"p"},"<<")," operator")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Shift right (no sign extension!) using the '>>' operator")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Bitwise logical ",(0,a.kt)("inlineCode",{parentName:"p"},"NOT")," using the ",(0,a.kt)("inlineCode",{parentName:"p"},"!")," prefix operator"),(0,a.kt)("p",{parentName:"li"},"These should feel natural when using RustHDL, as expressions follow Rust's rules (and not Verilog's).\nFor example:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"# use rust_hdl::prelude::*;\nlet x: Bits<32> = 0xDEAD_0000_u32.to_bits();\nlet y: Bits<32> = 0x0000_BEEF_u32.to_bits();\nlet z = x + y;\nassert_eq!(z, 0xDEAD_BEEF_u32.to_bits());\n")),(0,a.kt)("p",{parentName:"li"},"You can, of course, construct expressions of arbitrary complexity using parenthesis, etc.\nThe only real surprise may be at synthesis time, when you try to fit the expression onto hardware."))))}c.isMDXComponent=!0}}]);