"use strict";(self.webpackChunkrust_hdl_org=self.webpackChunkrust_hdl_org||[]).push([[525],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=i,f=p["".concat(o,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:i,l[1]=s;for(var u=2;u<a;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3090:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:2},l="Quickstart for Simulation",s={unversionedId:"simulation",id:"simulation",title:"Quickstart for Simulation",description:"If you don't have an FPGA (or the one I used in the blinky quickstart), then you can just do everything",source:"@site/docs/simulation.md",sourceDirName:".",slug:"/simulation",permalink:"/simulation",draft:!1,editUrl:"https://github.com/samitbasu/rust-hdl/tree/main/packages/create-docusaurus/templates/shared/docs/simulation.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Blinky on Alchitry CU",permalink:"/intro"},next:{title:"The Basics",permalink:"/guide/"}},o={},u=[],c={toc:u},p="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"quickstart-for-simulation"},"Quickstart for Simulation"),(0,i.kt)("p",null,"If you don't have an FPGA (or the one I used in the blinky quickstart), then you can just do everything\nusing simulation."),(0,i.kt)("p",null,"To add ",(0,i.kt)("inlineCode",{parentName:"p"},"rust-hdl")," to your project, simply create a new project and then add ",(0,i.kt)("inlineCode",{parentName:"p"},"rust-hdl")," as a dependency:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"samitbasu@fedora jnk]$ cargo new testme\n     Created binary (application) `testme` package\n[samitbasu@fedora jnk]$ cd testme\n[samitbasu@fedora testme]$ cargo add rust-hdl\n    Updating crates.io index\n      Adding rust-hdl v0.38.2 to dependencies.\n[samitbasu@fedora testme]$ \n")),(0,i.kt)("p",null,"To get the most benefit from ",(0,i.kt)("inlineCode",{parentName:"p"},"rust-hdl")," you should probably\ninstall ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/YosysHQ/yosys"},"yosys"),".\n",(0,i.kt)("inlineCode",{parentName:"p"},"Yosys")," provides more sophisticated checking on the generated Verilog and it also provides some\nsynthesis pathways for some of the more open-source friendly FPGAs."),(0,i.kt)("p",null,"Then replace ",(0,i.kt)("inlineCode",{parentName:"p"},"main.rs")," with the following."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use std::time::Duration;\nuse rust_hdl::prelude::*;\n\nconst CLOCK_SPEED_HZ : u64 = 10_000;\n\n#[derive(LogicBlock)]  // <- This turns the struct into something you can simulate/synthesize\nstruct Blinky {\n    pub clock: Signal<In, Clock>, // <- input signal, type is clock\n    pulser: Pulser,               // <- sub-circuit, a widget that generates pulses\n    pub led: Signal<Out, Bit>,    // <- output signal, type is single bit\n}\n\nimpl Default for Blinky {\n   fn default() -> Self {\n       Self {\n         clock: Default::default(),\n         pulser: Pulser::new(CLOCK_SPEED_HZ, 1.0, Duration::from_millis(250)),\n         led: Default::default(),\n       }\n    }\n}\n\nimpl Logic for Blinky {\n    #[hdl_gen] // <- this turns the update function into an HDL Kernel that can be turned into Verilog\n    fn update(&mut self) {\n       // v-- write to the .next member     v-- read from .val() method\n       self.pulser.clock.next = self.clock.val();\n       self.pulser.enable.next = true.into();\n       self.led.next = self.pulser.pulse.val();\n    }\n}\n\nfn main() {\n    // v--- build a simple simulation (1 testbench, single clock)\n    let mut sim = simple_sim!(Blinky, clock, CLOCK_SPEED_HZ, ep, {\n        let mut x = ep.init()?;\n        wait_clock_cycles!(ep, clock, x, 4*CLOCK_SPEED_HZ);\n        ep.done(x)\n    });\n\n    // v--- construct the circuit\n    let uut = Blinky::default();\n    // v--- run the simulation, with the output traced to a .vcd file\n    sim.run_to_file(Box::new(uut), 5 * sim_time::ONE_SEC, "blinky.vcd").unwrap();\n    vcd_to_svg("blinky.vcd","blinky_all.svg",&["uut.clock", "uut.led"], 0, 4 * sim_time::ONE_SEC).unwrap();\n    vcd_to_svg("blinky.vcd","blinky_pulse.svg",&["uut.clock", "uut.led"], 900 * sim_time::ONE_MILLISECOND, 1500 * sim_time::ONE_MILLISECOND).unwrap();\n}\n')),(0,i.kt)("p",null,"Finally, run this simulation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"[samitbasu@fedora testme]$ cargo run --release\n   Compiling testme v0.1.0 (/home/samitbasu/Devel/jnk/testme)\n    Finished release [optimized] target(s) in 0.92s\n     Running `target/release/testme`\n[samitbasu@fedora testme]$ \n")),(0,i.kt)("p",null,"You should now have a ",(0,i.kt)("inlineCode",{parentName:"p"},"vcd")," file that can be viewed with a tool like ",(0,i.kt)("a",{parentName:"p",href:"http://gtkwave.sourceforge.net/"},"gtkwave"),".  Alternately, RustHDL\nincludes the ability to generate an ",(0,i.kt)("inlineCode",{parentName:"p"},"svg")," file from the ",(0,i.kt)("inlineCode",{parentName:"p"},"vcd")," file.\nThis is the end result showing the entire simulation:\n",(0,i.kt)("img",{alt:"blinky_all",src:n(9217).Z,width:"1000",height:"400"}),"\nHere is a zoom in showing the pulse to the LED\n",(0,i.kt)("img",{alt:"blinky_pulse",src:n(8212).Z,width:"1000",height:"400"})))}d.isMDXComponent=!0},9217:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/blinky_all-0d36e684a0f897c0cac44c8d8ba2739a.svg"},8212:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/blinky_pulse-8275a1c4620656d3c49f66982f1a1fd6.svg"}}]);