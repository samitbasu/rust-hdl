"use strict";(self.webpackChunkrust_hdl_org=self.webpackChunkrust_hdl_org||[]).push([[736],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),d=a,h=u["".concat(l,".").concat(d)]||u[d]||f[d]||o;return r?n.createElement(h,i(i({ref:t},p),{},{components:r})):n.createElement(h,i({ref:t},p))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5189:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:100},i="References",s={unversionedId:"references",id:"references",title:"References",description:"RustHDL was inspired by and borrows from the following awesome projects!  They are listed in",source:"@site/docs/references.md",sourceDirName:".",slug:"/references",permalink:"/references",draft:!1,editUrl:"https://github.com/samitbasu/rust-hdl/tree/main/packages/create-docusaurus/templates/shared/docs/references.md",tags:[],version:"current",sidebarPosition:100,frontMatter:{sidebar_position:100},sidebar:"tutorialSidebar",previous:{title:"Change Log",permalink:"/changelog"}},l={},c=[],p={toc:c},u="wrapper";function f(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"references"},"References"),(0,a.kt)("p",null,"RustHDL was inspired by and borrows from the following awesome projects!  They are listed in\nno particular order..."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"LucidHDL is a very cool HDL developed by the folks over at ",(0,a.kt)("a",{parentName:"li",href:"https://www.alchitry.com"},"Alchitry"),".  I initially\nstarted writing tooling to manipulate Lucid using Rust, and then realized that it would be better for\nme to just use Rust itself.  But there is some great stuff on their website, and their book is excellent."),(0,a.kt)("li",{parentName:"ul"},"AlchitryLabs is an IDE from ",(0,a.kt)("a",{parentName:"li",href:"https://www.alchitry.com"},"Alchitry")," that supports the LucidHDL.  They open sourced\nit and it is an impressive piece of software."),(0,a.kt)("li",{parentName:"ul"},"For Python fans, ",(0,a.kt)("a",{parentName:"li",href:"https://myhdl.org"},"MyHDL")," is a Python based approach to generating HDL.  If you consider yourself a Python person, check it out.  After I left Verilog, I first rewrote a fair chunk of firmware using MyHDL and Python.  In the end, it wasn't for me, but many of the ideas are very cleanly expressed."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"The")," open source toolchain that started it all is ",(0,a.kt)("a",{parentName:"li",href:"https://clifford.at/icestorm"},"IceStorm")," Open Source tool chain for the ",(0,a.kt)("inlineCode",{parentName:"li"},"iCE 40")," FPGA, and an incredibly powerful concept.  In particular, Claire's work demonstrated a software-like path for handling FPGAs that was critical to a number of open source FPGA-centric projects. "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/YosysHQ/yosys"},"YoSys")," is the Verilog synthesis suite used by ","[RustHDL]"," to\nprocess generated Verilog and check a design for potential errors (static analysis).  "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"http://iverilog.icarus.com/"},"Icarus")," is a verilog simulator that is software based, open source\nand easy to use.  Before ","[RustHDL]"," got it's own simulator, I would write and simulate everything\nusing ","[Icarus]","."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.veripool.org/verilator/"},"Verilator")," I'd condsider this the professional option\nfor simulation (particularly of super complicated designs).  ","[RustHDL]"," doesn't come anywhere near\nthe simulation performance of ","[Verilator]"," yet, but the goal is to either generate Verilog that\n","[Verilator]"," can process, or adopt the same types of techniques described by the author in this\n",(0,a.kt)("a",{parentName:"li",href:"https://veripool.org/papers/Verilator_Internals1_202010.pdf"},"paper"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://opalkelly.com"},"OpalKelly")," - Excellent FPGA modules to use for pretty much any purpose.  Their\nFrontPanel API is super easy to use, and RustHDL provides bindings to make it trivial.")))}f.isMDXComponent=!0}}]);