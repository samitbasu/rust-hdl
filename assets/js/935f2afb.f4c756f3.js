"use strict";(self.webpackChunkrust_hdl_org=self.webpackChunkrust_hdl_org||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Blinky on Alchitry CU","href":"/intro","docId":"intro"},{"type":"link","label":"Quickstart for Simulation","href":"/simulation","docId":"simulation"},{"type":"category","label":"The Basics","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"What is an FPGA anyway? (and who needs one?)","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Cybersecurity","href":"/guide/fpga/cybersecurity","docId":"guide/fpga/cybersecurity"},{"type":"link","label":"Deterministic systems","href":"/guide/fpga/deterministic-systems","docId":"guide/fpga/deterministic-systems"},{"type":"link","label":"High Speed I/O","href":"/guide/fpga/high-speed-io","docId":"guide/fpga/high-speed-io"},{"type":"link","label":"True Parallelism (The Kitchen Analogy)","href":"/guide/fpga/kitchen-analogy","docId":"guide/fpga/kitchen-analogy"},{"type":"link","label":"Saving those Joules","href":"/guide/fpga/low-power","docId":"guide/fpga/low-power"}],"href":"/guide/fpga/"},{"type":"category","label":"Programming models for FPGAs","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Lucid","href":"/guide/programming/lucid","docId":"guide/programming/lucid"},{"type":"link","label":"Python Based Approaches","href":"/guide/programming/migen","docId":"guide/programming/migen"},{"type":"link","label":"Verilog","href":"/guide/programming/verilog","docId":"guide/programming/verilog"}],"href":"/guide/programming/"},{"type":"category","label":"Using RustHDL","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Representing bits","href":"/guide/rusthdl/bits","docId":"guide/rusthdl/bits"},{"type":"link","label":"High Level Synthesis","href":"/guide/rusthdl/high_level_synthesis","docId":"guide/rusthdl/high_level_synthesis"},{"type":"link","label":"Interfaces","href":"/guide/rusthdl/interfaces","docId":"guide/rusthdl/interfaces"},{"type":"link","label":"Loops and Arrays","href":"/guide/rusthdl/loops","docId":"guide/rusthdl/loops"},{"type":"link","label":"Operations on bits","href":"/guide/rusthdl/operators","docId":"guide/rusthdl/operators"},{"type":"link","label":"Signal Type","href":"/guide/rusthdl/signals","docId":"guide/rusthdl/signals"},{"type":"link","label":"Simulation","href":"/guide/rusthdl/simulation","docId":"guide/rusthdl/simulation"},{"type":"link","label":"Struct valued signals","href":"/guide/rusthdl/struct_valued","docId":"guide/rusthdl/struct_valued"},{"type":"link","label":"Synthesizable Subset of Rust","href":"/guide/rusthdl/synthesizable","docId":"guide/rusthdl/synthesizable"},{"type":"link","label":"Traits","href":"/guide/rusthdl/traits","docId":"guide/rusthdl/traits"},{"type":"link","label":"Generating Verilog","href":"/guide/rusthdl/verilog","docId":"guide/rusthdl/verilog"},{"type":"link","label":"Wrapping IP Cores","href":"/guide/rusthdl/wrapping","docId":"guide/rusthdl/wrapping"}],"href":"/guide/rusthdl/"}],"href":"/guide/"},{"type":"link","label":"Roadmap","href":"/roadmap","docId":"roadmap"},{"type":"link","label":"Change Log","href":"/changelog","docId":"changelog"},{"type":"link","label":"References","href":"/references","docId":"references"}]},"docs":{"changelog":{"id":"changelog","title":"Change Log","description":"v0.44.0","sidebar":"tutorialSidebar"},"guide/fpga/cybersecurity":{"id":"guide/fpga/cybersecurity","title":"Cybersecurity","description":"Who doesn\'t worry about cybersecurity these days?  CPU software ecosystems are extraordinarily","sidebar":"tutorialSidebar"},"guide/fpga/deterministic-systems":{"id":"guide/fpga/deterministic-systems","title":"Deterministic systems","description":"Lets suppose you have to do some incredibly boring and repetitive task,","sidebar":"tutorialSidebar"},"guide/fpga/high-speed-io":{"id":"guide/fpga/high-speed-io","title":"High Speed I/O","description":"Another area where FPGAs excel is at high speed predictable I/O.  Suppose you are","sidebar":"tutorialSidebar"},"guide/fpga/index":{"id":"guide/fpga/index","title":"What is an FPGA anyway? (and who needs one?)","description":"That is a great question!  And one I am not really planning to answer.  There are some great","sidebar":"tutorialSidebar"},"guide/fpga/kitchen-analogy":{"id":"guide/fpga/kitchen-analogy","title":"True Parallelism (The Kitchen Analogy)","description":"CPUs are fast, but they are sequential devices.  Here\'s another way to think","sidebar":"tutorialSidebar"},"guide/fpga/low-power":{"id":"guide/fpga/low-power","title":"Saving those Joules","description":"Can you doe a lot with those new 400MHz Cortex-M4 ARM microprocessors?  Sure!  Are there any downsides?","sidebar":"tutorialSidebar"},"guide/index":{"id":"guide/index","title":"The Basics","description":"Let\'s start with the basic questions you may be asking yourself:","sidebar":"tutorialSidebar"},"guide/programming/index":{"id":"guide/programming/index","title":"Programming models for FPGAs","description":"I\'m no expert on the history of FPGA programming.  However, I can point out some guideposts in the area of FPGA programming, and my experience with them to date. Your mileage may, of course, vary.","sidebar":"tutorialSidebar"},"guide/programming/lucid":{"id":"guide/programming/lucid","title":"Lucid","description":"Lucid is an excellent example of how Verilog can be improved.  Developed by","sidebar":"tutorialSidebar"},"guide/programming/migen":{"id":"guide/programming/migen","title":"Python Based Approaches","description":"MyHDL","sidebar":"tutorialSidebar"},"guide/programming/verilog":{"id":"guide/programming/verilog","title":"Verilog","description":"Verilog was originally a language for simulating the behavior of digital circuits","sidebar":"tutorialSidebar"},"guide/rusthdl/bits":{"id":"guide/rusthdl/bits","title":"Representing bits","description":"The Bits type is a Copy enabled type that you can construct from integers,","sidebar":"tutorialSidebar"},"guide/rusthdl/high_level_synthesis":{"id":"guide/rusthdl/high_level_synthesis","title":"High Level Synthesis","description":"RustHDL supports it\'s own version of High Level Synthesis (HLS).  Normally, this is some kind","sidebar":"tutorialSidebar"},"guide/rusthdl/index":{"id":"guide/rusthdl/index","title":"Using RustHDL","description":"This section of the documentation covers the details of using RustHDL to generate firmware.","sidebar":"tutorialSidebar"},"guide/rusthdl/interfaces":{"id":"guide/rusthdl/interfaces","title":"Interfaces","description":"One area you will encouter as your circuits become more complex is that the interfaces","sidebar":"tutorialSidebar"},"guide/rusthdl/loops":{"id":"guide/rusthdl/loops","title":"Loops and Arrays","description":"A frequently useful feature of hardware is to be able to handle a variable number of","sidebar":"tutorialSidebar"},"guide/rusthdl/operators":{"id":"guide/rusthdl/operators","title":"Operations on bits","description":"The Bits type supports a subset of operations that can be synthesized in","sidebar":"tutorialSidebar"},"guide/rusthdl/signals":{"id":"guide/rusthdl/signals","title":"Signal Type","description":"Signals are software abstractions to represent physical wires.","sidebar":"tutorialSidebar"},"guide/rusthdl/simulation":{"id":"guide/rusthdl/simulation","title":"Simulation","description":"Now that you have a shiny new circuit implemented as a struct, what do you do with it?","sidebar":"tutorialSidebar"},"guide/rusthdl/struct_valued":{"id":"guide/rusthdl/struct_valued","title":"Struct valued signals","description":"We have seen how Enums and Interfaces can help make your code more compact and readable.  There","sidebar":"tutorialSidebar"},"guide/rusthdl/synthesizable":{"id":"guide/rusthdl/synthesizable","title":"Synthesizable Subset of Rust","description":"RustHDL uses procedural macros to define a subset of the Rust language that can be used to","sidebar":"tutorialSidebar"},"guide/rusthdl/traits":{"id":"guide/rusthdl/traits","title":"Traits","description":"There is only one trait that you typically need to implement to get things to work in RustHDL","sidebar":"tutorialSidebar"},"guide/rusthdl/verilog":{"id":"guide/rusthdl/verilog","title":"Generating Verilog","description":"At some point, you will want to generate Verilog so you can send your design to other","sidebar":"tutorialSidebar"},"guide/rusthdl/wrapping":{"id":"guide/rusthdl/wrapping","title":"Wrapping IP Cores","description":"Occasionally in RustHDL, you will need to wrap an external IP core or logic primitive supported","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Blinky on Alchitry CU","description":"Let\'s go from an empty setup to a functioning blinking LED on an actual FPGA!  Blinking an LED is a time-honored tradition of demonstrating that you can go from source to somehting that understands","sidebar":"tutorialSidebar"},"references":{"id":"references","title":"References","description":"RustHDL was inspired by and borrows from the following awesome projects!  They are listed in","sidebar":"tutorialSidebar"},"roadmap":{"id":"roadmap","title":"Roadmap","description":"It\'s difficult to generate an accurate roadmap for a project like RustHDL, given that it\'s not sponsored and so vast in scope.","sidebar":"tutorialSidebar"},"simulation":{"id":"simulation","title":"Quickstart for Simulation","description":"If you don\'t have an FPGA (or the one I used in the blinky quickstart), then you can just do everything","sidebar":"tutorialSidebar"}}}')}}]);