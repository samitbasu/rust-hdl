"use strict";(self.webpackChunkrust_hdl_org=self.webpackChunkrust_hdl_org||[]).push([[398],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=u(n),h=s,g=p["".concat(l,".").concat(h)]||p[h]||d[h]||i;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=n.length,o=new Array(i);o[0]=h;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[p]="string"==typeof e?e:s,o[1]=a;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1258:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>u});var r=n(7462),s=(n(7294),n(3905));const i={},o="High Level Synthesis",a={unversionedId:"guide/rusthdl/high_level_synthesis",id:"guide/rusthdl/high_level_synthesis",title:"High Level Synthesis",description:"RustHDL supports it's own version of High Level Synthesis (HLS).  Normally, this is some kind",source:"@site/docs/guide/rusthdl/high_level_synthesis.md",sourceDirName:"guide/rusthdl",slug:"/guide/rusthdl/high_level_synthesis",permalink:"/guide/rusthdl/high_level_synthesis",draft:!1,editUrl:"https://github.com/samitbasu/rust-hdl/tree/main/packages/create-docusaurus/templates/shared/docs/guide/rusthdl/high_level_synthesis.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Representing bits",permalink:"/guide/rusthdl/bits"},next:{title:"Interfaces",permalink:"/guide/rusthdl/interfaces"}},l={},u=[],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"high-level-synthesis"},"High Level Synthesis"),(0,s.kt)("p",null,"RustHDL supports it's own version of High Level Synthesis (HLS).  Normally, this is some kind\nof strange drag-and-drop based entry or visual programming paradigm.  Worse, still, it could\nbe some kind of macro meta-language that you build complex designs out of using a graphical\neditor.  "),(0,s.kt)("p",null,"But that is not the case here!  RustHDL's HLS approach is much simpler.  Essentially,\neven though ","[Interfaces]"," are so great, you may not want to use them.  So the core widgets,\nlike the ","[AsynchronousFIFO]"," do not use Interfaces.  That leads to some pretty gnarly\ncircuit definitions.  Here is the ","[AsynchronousFIFO]"," for example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"# use rust_hdl::prelude::*;\npub struct AsynchronousFIFO<D: Synth, const N: usize, const NP1: usize, const BLOCK_SIZE: u32> {\n    // Read interface\n    pub read: Signal<In, Bit>,\n    pub data_out: Signal<Out, D>,\n    pub empty: Signal<Out, Bit>,\n    pub almost_empty: Signal<Out, Bit>,\n    pub underflow: Signal<Out, Bit>,\n    pub read_clock: Signal<In, Clock>,\n    pub read_fill: Signal<Out, Bits<NP1>>,\n    // Write interface\n    pub write: Signal<In, Bit>,\n    pub data_in: Signal<In, D>,\n    pub full: Signal<Out, Bit>,\n    pub almost_full: Signal<Out, Bit>,\n    pub overflow: Signal<Out, Bit>,\n    pub write_clock: Signal<In, Clock>,\n    pub write_fill: Signal<Out, Bits<NP1>>,\n    // Internals ommitted...\n}\n")),(0,s.kt)("p",null,"Using an ","[AsynchronousFIFO]"," requires up to 14 separate signals!  With mixed directions and types!\nFortunately, there is an HLS wrapper type you can use instead.  It's ",(0,s.kt)("em",{parentName:"p"},"much")," simpler"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"# use rust_hdl::prelude::*;\npub struct AsyncFIFO<T: Synth, const N: usize, const NP1: usize, const BLOCK_SIZE: u32> {\n    pub bus_write: FIFOWriteResponder<T>,\n    pub write_clock: Signal<In, Clock>,\n    pub bus_read: FIFOReadResponder<T>,\n    pub read_clock: Signal<In, Clock>,\n    fifo: AsynchronousFIFO<T, N, NP1, BLOCK_SIZE>,\n}\n")),(0,s.kt)("p",null,"In this case, it has only 4 signals, and using it is also much easier.  You can use the\n","[FIFOWriteResponder]"," and ","[FIFOWriteController]"," busses to send and receive data from the\nasynchronous fifo.  Even better is the fact that this HLS construct is just a thin wrapper\naround the ","[AsynchronousFIFO]",", so when you synthesize it, or plot signals, there is nothing\nextra under the hood."),(0,s.kt)("p",null,"The HLS library also includes a sort of System-on-chip model in case you want to use it.\nIt allows you to connect a set of widgets to a single controller, and route data to them\nover a fixed bus using a very simple protocol.  It won't replace AXI or WishBone, but it\ncan be used to build some pretty complicated designs and remain readable.  The test cases\nare a good place to look for some runnable examples of the different SoC widgets."))}d.isMDXComponent=!0}}]);