"use strict";(self.webpackChunkrust_hdl_org=self.webpackChunkrust_hdl_org||[]).push([[345],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(r),m=a,f=c["".concat(l,".").concat(m)]||c[m]||d[m]||i;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5027:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const i={},o="Representing bits",s={unversionedId:"guide/rusthdl/bits",id:"guide/rusthdl/bits",title:"Representing bits",description:"The Bits type is a Copy enabled type that you can construct from integers,",source:"@site/docs/guide/rusthdl/bits.md",sourceDirName:"guide/rusthdl",slug:"/guide/rusthdl/bits",permalink:"/guide/rusthdl/bits",draft:!1,editUrl:"https://github.com/samitbasu/rust-hdl/tree/main/packages/create-docusaurus/templates/shared/docs/guide/rusthdl/bits.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Using RustHDL",permalink:"/guide/rusthdl/"},next:{title:"High Level Synthesis",permalink:"/guide/rusthdl/high_level_synthesis"}},l={},u=[],p={toc:u},c="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"representing-bits"},"Representing bits"),(0,a.kt)("p",null," The ",(0,a.kt)("a",{parentName:"p",href:"core::bits::Bits"},"Bits")," type is a ",(0,a.kt)("inlineCode",{parentName:"p"},"Copy")," enabled type that you can construct from integers,\nfrom the ",(0,a.kt)("inlineCode",{parentName:"p"},"Default")," trait, or from other ",(0,a.kt)("inlineCode",{parentName:"p"},"Bits"),".    Mostly, it is meant to stay out of your way\nand behave like a ",(0,a.kt)("inlineCode",{parentName:"p"},"u32"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"let x: Bits<50> = Default::default();\n")),(0,a.kt)("p",null," This will construct a length 50 bit vector that is initialized to all ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,a.kt)("p",null," You can also convert from literals into bit vectors using the ","[From]"," and ","[Into]"," traits,\nprovided the literals are of the ",(0,a.kt)("inlineCode",{parentName:"p"},"u64")," type."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"let x: Bits<50> = 0xBEEF.into();\n")),(0,a.kt)("p",null," In some cases, Rust complains about literals, and you may need to provide a suffix:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"let x: Bits<50> = 0xDEAD_BEEF_u64.into();\n")),(0,a.kt)("p",null," However, in most cases, you can leave literals suffix-free, and Rust will automatically\ndetermine the type from the context."),(0,a.kt)("p",null," You can construct a larger constant using the ","[bits]"," function.  If you have a literal of up to\n128 bits, it provides a functional form"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"let x: Bits<200> = bits(0xDEAD_BEEE); // Works for up to 128 bit constants.\n")),(0,a.kt)("p",null," There is also the ","[ToBits]"," trait, which is implemented on the basic unsigned integer types.\nThis trait allows you to handily convert from different integer values"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"let x: Bits<10> = 32_u8.to_bits();\n")))}d.isMDXComponent=!0}}]);